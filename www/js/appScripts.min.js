!function(){var config=function($ionicConfigProvider,$urlRouterProvider,$stateProvider,$compileProvider){$ionicConfigProvider.backButton.text(""),$ionicConfigProvider.views.forwardCache(!0),$ionicConfigProvider.views.swipeBackEnabled(!1),$compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|geo|tel|maps):/),$stateProvider.state("root",{url:"/",templateUrl:"views/root.html"}).state("home",{url:"/home",templateUrl:"views/home.html"}).state("content1",{url:"/content1",templateUrl:"views/content1.html"}).state("content2",{url:"/content2",templateUrl:"views/content2.html"}).state("filterWindow",{url:"/filterWindow",templateUrl:"views/filterWindow.html"}).state("content3",{url:"/content3",templateUrl:"views/content3.html",cache:!1}),$urlRouterProvider.otherwise("/")},run=function($ionicPlatform,$ionicHistory,$rootScope,$window,$timeout,coreService,apiDataManager,log,gps){$ionicPlatform.registerBackButtonAction(function(){"Android"==coreService.init.currentOs&&(console.log("'run method': [device back button pressed]"),coreService[$ionicHistory.currentStateName()].handleBackButtonClick(!0))},100),angular.element($window).bind("orientationchange",function(){("content1"==$ionicHistory.currentView().stateName||"content2"==$ionicHistory.currentView().stateName||"content3"==$ionicHistory.currentView().stateName)&&coreService[$ionicHistory.currentView().stateName].handleOrientationChange()}),$ionicPlatform.ready(function(){window.cordova&&screen.lockOrientation("portrait"),coreService.init.timer(),coreService.init.injectedServices(window),log.init(),coreService.init.service(window,screen),coreService.init.appStyle(window),coreService.appReadiness.fireChecking(void 0,void 0),gps.inspect.locationServices(coreService.init.currentOs),apiDataManager.mapStatesAndCategories.fetch(),apiDataManager.banners.fetch(),$timeout(function(){$("body").show(),$timeout(function(){$rootScope.$broadcast("$update",{root:{backImgVisible:!0}})},500)},500)})};angular.module("appModule",["ionic","angucomplete-alt","ngCordova","uiGmapgoogle-maps","ngIOS9UIWebViewPatch"]).config(config).run(run).filter("htmlToPlainText",function($sce){return function(text){return $sce.trustAsHtml(text)}}).filter("unique",function(){return function(collection,keyname){var output=[],keys=[];return angular.forEach(collection,function(item){var key=item[keyname];-1===keys.indexOf(key)&&(keys.push(key),output.push(item))}),output}})}(),function(){var appModule=angular.module("appModule");appModule.directive("advertiseBanner",function(){return{"restrict ":"E",templateUrl:"directives/advertiseBanner/template.html"}}),appModule.directive("banners",function(){return{restrict:"E",templateUrl:"directives/banners/template.html"}}),appModule.directive("suburbsAutoComplete",function(){return{restrict:"E",templateUrl:"directives/suburbsAutoComplete/template.html"}})}(),function(){var MainAppController=function(coreService,activeIdService,apiDataManager,mapService,hardCodedDataService,log,$rootScope,$scope,$timeout,$state,$ionicScrollDelegate,$ionicModal){$scope.app={currentOs:void 0},$scope.currentView={clickEventsOn:!0,spinnerVisible:!0},$scope.view={banners:void 0},$scope.root={backImgVisible:!1},$scope.home={mapImgVisible:!1},$scope.content1={topNavTitle:hardCodedDataService.navBarTitle.content1.mapStates,collection:void 0,highlightedItemIndex:void 0},$scope.content2={mainMapInstance:void 0,activeMarker:void 0,mapViewOn:!0,noMapInfoVisible:!1,mainGoogleMapVisible:!1,smallGoogleMapVisible:!1,collection:void 0,activeCompanyObject:void 0},$scope.filterWindow={gpsPostCode:void 0,myLocationChecked:!1,activeFilterValue:void 0,activeRadius:void 0},$scope.$on("$update",function(e,args){var keys2,i,j,keys1=Object.keys(args);for(i=0;i<keys1.length;++i)if("callback"!=keys1[i])for(keys2=Object.keys(args[keys1[i]]),j=0;j<keys2.length;++j)$scope[keys1[i]][keys2[j]]=args[keys1[i]][keys2[j]];keys1.indexOf("callback")>-1&&$timeout(function(){args.callback()})}),$scope.hardCodedData={view:hardCodedDataService.view,msgDialog:hardCodedDataService.msgDialog},$scope.activeIdServiceData={company:activeIdService.company},$scope.titles=hardCodedDataService.navBarTitle,$scope.coreServiceMethods=coreService.scopeMethods,$scope.activeIdServiceMethods={getActiveCollectionName:activeIdService.content1.getActiveCollectionName},coreService.init.serviceEvents(coreService,$rootScope,$scope),$scope.$watch("filterWindow.activeOptionName",function(newVal,oldVal){$scope.filterWindow.activeOptionValue="","Suburb"==newVal&&($scope.filterWindow.activeRadius=void 0)})},SuburbsController=function($rootScope,$scope,apiDataManager){$scope.objectSelectedCallback=function(item){angular.isDefined(item)&&angular.isDefined(item.title)&&$rootScope.$broadcast("$update",{filterWindow:{activeFilterValue:item.title}})},$scope.postCodeSuburbInputChanged=function(inputData){$rootScope.$broadcast("$update",{filterWindow:{activeFilterValue:inputData}})},apiDataManager.suburbs.fetch(function(data){$scope.suburbs=data},function(){$scope.suburbs=void 0})};MainAppController.$inject=["coreService","activeIdService","apiDataManager","mapService","hardCodedDataService","log","$rootScope","$scope","$timeout","$state","$ionicScrollDelegate","$ionicModal"],SuburbsController.$inject=["$rootScope","$scope","apiDataManager"],angular.module("appModule").controller("MainAppController",MainAppController),angular.module("appModule").controller("SuburbsController",SuburbsController)}(),function(){var activeIdService=function($rootScope,globalService,log){var init={service:function(mapStates,categories){mapState.setId(mapStates[0].id),category.setId(categories[0].id),init.subCategoriesIds(categories,subcategory.ids),log.post("id",{service:"initialized"})},subCategoriesIds:function(collection,objectToWriteTo){for(var i=0;i<collection.length;++i)angular.isDefined(collection[i].subcategories)&&(objectToWriteTo[collection[i].id]={subCategoryId:collection[i].subcategories[0].id},init.subCategoriesIds(collection[i].subcategories,objectToWriteTo[collection[i].id]))}},mapState={id:void 0,setId:function(mapStateId){mapStateId!==mapState.id&&(mapState.id=mapStateId,log.post("id",{sender:"mapState.setId","mapState.id":mapStateId}))},getId:function(){return mapState.id}},category={id:void 0,setId:function(categoryId){categoryId!==category.id&&(category.id=categoryId,log.post("id",{sender:"category.setId","category.id":categoryId}))},getId:function(){return category.id}},subcategory={ids:{},setId:function(idsPathArray,newSubCategoryId){for(var treeObject=subcategory.ids,i=1;i<idsPathArray.length;++i)treeObject=treeObject[idsPathArray[i]];treeObject.subCategoryId=newSubCategoryId,log.post("id",{sender:"subcategory.setId",newSubCategoryId:newSubCategoryId,ids:subcategory.ids})},getId:function(idsPathArray){for(var treeObject=subcategory.ids,i=0;i<idsPathArray.length;++i)treeObject=treeObject[idsPathArray[i]];return treeObject.subCategoryId}},company={id:void 0,setId:function(companyId){companyId!==company.id&&(company.id=companyId,log.post("id",{sender:"company.setId","company.id":companyId}))},getId:function(){return company.id}},content1={idsPath:[],setIdsPath:function(args){for(var executeOperation=function(options){switch(options.operName){case"empty":content1.idsPath.length>0&&(content1.idsPath=[],log.post("id",{sender:"content1.setIdsPath",options:options,idsPath:$.extend(!0,[],content1.idsPath)}));break;case"last":content1.idsPath[content1.idsPath.length-1]!==options.newId&&(content1.idsPath[content1.idsPath.length-1]=options.newId,log.post("id",{sender:"content1.setIdsPath",options:options,idsPath:$.extend(!0,[],content1.idsPath)}));break;case"push":content1.idsPath.push(options.newId),log.post("id",{sender:"content1.setIdsPath",options:options,idsPath:$.extend(!0,[],content1.idsPath)});break;case"pop":content1.idsPath.pop(),log.post("id",{sender:"content1.setIdsPath",options:options,idsPath:$.extend(!0,[],content1.idsPath)})}},i=0;i<args.length;++i)executeOperation(args[i])},getIdsPath:function(skipLastIndex){var result=[];if(skipLastIndex)for(var i=0;i<content1.idsPath.length-1;++i)result[i]=content1.idsPath[i];else result=content1.idsPath;return result},getLastPathId:function(){return content1.idsPath[content1.idsPath.length-1]},getActiveCollectionName:function(){switch(content1.getIdsPath().length){case 1:return"mapStates";case 2:return"categories";default:return"subcategories"}}};return{init:init,mapState:mapState,category:category,subcategory:subcategory,company:company,content1:content1}};activeIdService.$inject=["$rootScope","globalService","log"],angular.module("appModule").service("activeIdService",activeIdService)}(),function(){var apiDataManager=function($rootScope,$q,globalService,httpService,phonesMemoryService,activeIdService,mapService,promise,log,filterService,hardCodedDataService){var initDataInspect={isDone:function(){return mapStatesAndCategories.initDataInspectDone&&banners.initDataInspectDone?!0:!1},markAsNotDone:function(callback){mapStatesAndCategories.initDataInspectDone=!1,banners.initDataInspectDone=!1,callback&&callback()}},mapStatesAndCategories={mapStatesData:void 0,categoriesData:void 0,initDataInspectDone:!1,fetch:function(finalCallBack){mapStatesAndCategories.fetchFromRemote(function(mapStatesArray,categoriesArray){mapStatesAndCategories.storeInVar(mapStatesArray,categoriesArray,!0,function(){mapStatesAndCategories.updateInPhone(function(){mapStatesAndCategories.endFetch(finalCallBack)},function(){mapStatesAndCategories.endFetch(finalCallBack)})})},function(){mapStatesAndCategories.fetchFromPhone(function(mapStatesArray,categoriesArray){mapStatesAndCategories.storeInVar(mapStatesArray,categoriesArray,!1,function(){mapStatesAndCategories.endFetch(finalCallBack)})},function(){mapStatesAndCategories.fetchFromAppFiles(function(mapStatesArray,categoriesArray){mapStatesAndCategories.storeInVar(mapStatesArray,categoriesArray,!0,function(){mapStatesAndCategories.updateInPhone(function(){mapStatesAndCategories.endFetch(finalCallBack)},function(){mapStatesAndCategories.endFetch(finalCallBack)})})},function(){mapStatesAndCategories.endFetch(finalCallBack)})})})},fetchFromRemote:function(success,error){$q.all([promise.create("mapStates api request",httpService.requestData,{url:globalService.init.apiServerAddress,query:mapStatesAndCategories.getMapStatesQueryString()}),promise.create("categories api request",httpService.requestData,{url:globalService.init.apiServerAddress,query:mapStatesAndCategories.getCategoriesQueryString()})]).then(function(dataReceived){log.post("apiDataMgr",{sender:"mapStatesAndCategories.fetchFromRemote",status:"success"}),dataReceived[0]=filterService.objectsByAnotherCollection(["name"],dataReceived[0],hardCodedDataService.states),success(dataReceived[0],dataReceived[1])},function(){log.post("apiDataMgr",{sender:"mapStatesAndCategories.fetchFromRemote",status:"error"}),error()})},fetchFromPhone:function(success,error){$q.all([promise.create("reading mapStates from phone",phonesMemoryService.mapStates.read),promise.create("reading categories from phone",phonesMemoryService.categories.read)]).then(function(dataReceived){log.post("apiDataMgr",{sender:"mapStatesAndCategories.fetchFromPhone",status:"success"}),success($.parseJSON(dataReceived[0]),$.parseJSON(dataReceived[1]))},function(){log.post("apiDataMgr",{sender:"mapStatesAndCategories.fetchFromPhone",status:"error"}),error()})},fetchFromAppFiles:function(success,error){$q.all([promise.create("reading default mapStates",httpService.requestData,{url:"localStorage",query:"/mapStates.json"}),promise.create("reading default categories",httpService.requestData,{url:"localStorage",query:"/categories.json"})]).then(function(dataReceived){log.post("apiDataMgr",{sender:"mapStatesAndCategories.fetchFromAppFiles",status:"success"}),success(dataReceived[0],dataReceived[1])},function(){log.post("apiDataMgr",{sender:"mapStatesAndCategories.fetchFromAppFiles",status:"error"}),error()})},updateInPhone:function(success,error){$q.all([promise.create("saving mapStates to phone",phonesMemoryService.mapStates.save,{fileData:JSON.stringify(mapStatesAndCategories.mapStatesData)}),promise.create("saving categories to phone",phonesMemoryService.categories.save,{fileData:JSON.stringify(mapStatesAndCategories.categoriesData)}),promise.create("creating mapStates dirs on phone",phonesMemoryService.mapStates.createDirs,{mapStates:mapStatesAndCategories.mapStatesData})]).then(function(){log.post("apiDataMgr",{sender:"mapStatesAndCategories.updateInPhone",status:"success"}),success()},function(){log.post("apiDataMgr",{sender:"mapStatesAndCategories.updateInPhone",status:"error"}),error()})},storeInVar:function(mapStatesArray,categoriesArray,sort,callback){sort&&(mapStatesArray=globalService.sort.objectsByProp("name",mapStatesArray),mapStatesAndCategories.sortCategories(categoriesArray)),mapStatesAndCategories.mapStatesData=mapStatesArray,mapStatesAndCategories.categoriesData=categoriesArray,log.post("apiDataMgr",{sender:"mapStatesAndCategories.storeInVar",status:"done"}),callback&&callback()},endFetch:function(finalCallBack){mapStatesAndCategories.initDataInspectDone=!0,$rootScope.$broadcast("$afterMapStatesAndCategoriesInitDataInspect"),finalCallBack&&finalCallBack()},getMapStatesQueryString:function(){return"/getstates"},getCategoriesQueryString:function(){return"/getcategories"},getSubCategoriesByIdsPath:function(idsPath,skipLastId){var upperBound=idsPath.length;skipLastId&&(upperBound-=1);for(var result=globalService.filter.objectsByPropsValues({id:idsPath[1]},mapStatesAndCategories.categoriesData),i=2;upperBound>i;++i)result=globalService.filter.objectsByPropsValues({id:idsPath[i]},result[0].subcategories);return result[0].subcategories},sortCategories:function(collection){for(var i=0;i<collection.length;++i)angular.isDefined(collection[i].subcategories)&&mapStatesAndCategories.sortCategories(collection[i].subcategories);collection=globalService.sort.objectsByProp("name",collection)}},banners={data:void 0,initDataInspectDone:!1,fetch:function(callback){banners.fetchFromRemote(function(bannersArray){banners.storeInVar(bannersArray,function(){banners.endFetch(callback)})},function(){banners.endFetch(callback)})},fetchFromRemote:function(success,error){$q.all([promise.create("banners api request",httpService.requestData,{url:globalService.init.apiServerAddress,query:banners.getQueryString()})]).then(function(dataReceived){void 0!==dataReceived[0]&&dataReceived[0].length>0?(log.post("apiDataMgr",{sender:"banners.fetchFromRemote",status:"success"}),success(dataReceived[0])):(log.post("apiDataMgr",{sender:"banners.fetchFromRemote",status:"data empty or corrupt"}),error())},function(){log.post("apiDataMgr",{sender:"banners.fetchFromRemote",status:"error"}),error()})},endFetch:function(callback){banners.initDataInspectDone=!0,callback&&callback()},storeInVar:function(bannersArray,callback){banners.data=bannersArray,log.post("apiDataMgr",{sender:"banners.storeInVar",status:"done"}),callback&&callback()},getByStateAndCatId:function(mapStateId,catId){var result=[];if(angular.isDefined(banners.data)){"active"===mapStateId&&(mapStateId=activeIdService.mapState.getId());for(var i=0;i<banners.data.length;++i)angular.isDefined(catId)?banners.data[i].state_id===mapStateId&&-1!=$.inArray(String(catId),banners.data[i].categories_ids)&&result.push(banners.data[i]):banners.data[i].state_id===mapStateId&&result.push(banners.data[i])}return log.post("apiDataMgr",{sender:"banners.getByStateAndCatId",mapStateId:mapStateId,categoryId:catId}),result},getQueryString:function(){return"/getallbanners"}},suburbs={data:void 0,fetch:function(successCallBack,errorCallBack){httpService.requestData({url:globalService.init.apiServerAddress,query:suburbs.getQueryString()},function(dataReceived){successCallBack(suburbs.data=suburbs.createSuburbsObjects(dataReceived))},function(){errorCallBack()})},getPostCodeBySuburb:function(args,successCallBack,errorCallBack){httpService.requestData({url:globalService.init.apiServerAddress,query:suburbs.getQueryString(args)},function(postCode){successCallBack(postCode.postcode)},function(){errorCallBack()})},getQueryString:function(args){return angular.isDefined(args)&&angular.isDefined(args.bySuburb)?"/getpostcodebysuburb/"+args.activeFilterValue:"/getsuburbs"},createSuburbsObjects:function(data){for(var result=[],i=0;i<data.suburbs.length;++i)result[i]={name:data.suburbs[i]};return result},isValidSuburb:function(phrase){for(var i=0;i<suburbs.data.length;++i)if(suburbs.data[i].name===phrase)return!0;return!1}},companies={data:void 0,fetch:function(args,finalCallBack){companies.reset(function(){globalService.init.onMobile!==!0||args.forceHttpRequest||!successfulCompaniesRequest.shouldSkipHttpRequest(activeIdService.mapState.getId(),activeIdService.content1.getLastPathId())?companies.fetchFromRemote(function(companiesObject){companies.storeInVar(companiesObject,"name",function(){companies.updateInPhone(function(){finalCallBack(companies.data.companies)})})},function(){companies.fetchWithoutHttpRequest(finalCallBack)}):(log.post("apiDataMgr",{sender:"companies.fetchFromRemote",status:"skipped"}),companies.fetchWithoutHttpRequest(finalCallBack))})},fetchWithoutHttpRequest:function(finalCallBack){companies.fetchFromPhone(function(companiesObject){companies.storeInVar(companiesObject,void 0,function(){finalCallBack(companies.data.companies)})},function(){companies.fetchFromAppFiles(function(companiesObject){companies.storeInVar(companiesObject,"name",function(){companies.updateInPhone(function(){finalCallBack(companies.data.companies)})})},function(){finalCallBack(void 0)})})},fetchFromRemote:function(success,error){$q.all([promise.create("companies api request",httpService.requestData,{url:globalService.init.apiServerAddress,query:companies.getQueryString(activeIdService.mapState.getId(),activeIdService.content1.getLastPathId())})]).then(function(dataReceived){void 0!==dataReceived[0].companies&&dataReceived[0].companies.length>0?(log.post("apiDataMgr",{sender:"companies.fetchFromRemote",status:"success"}),success(dataReceived[0])):(log.post("apiDataMgr",{sender:"companies.fetchFromRemote",status:"data empty or corrupt"}),error())},function(){log.post("apiDataMgr",{sender:"companies.fetchFromRemote",status:"error"}),error()})},fetchFromPhone:function(success,error){$q.all([promise.create("reading companies from mapStates dir on phone",phonesMemoryService.companies.read,{mapStateName:globalService.filter.objectsByPropsValues({id:activeIdService.mapState.getId()},mapStatesAndCategories.mapStatesData)[0].name,fileName:activeIdService.content1.getLastPathId()})]).then(function(dataReceived){log.post("apiDataMgr",{sender:"companies.fetchFromPhone",status:"success"}),success($.parseJSON(dataReceived[0]))},function(){log.post("apiDataMgr",{sender:"companies.fetchFromPhone",status:"error"}),error()})},fetchFromAppFiles:function(success,error){$q.all([promise.create("reading default companies",httpService.requestData,{url:"localStorage",query:"/"+globalService.filter.objectsByPropsValues({id:activeIdService.mapState.getId()},mapStatesAndCategories.mapStatesData)[0].name+"/"+activeIdService.content1.getLastPathId()+".json"})]).then(function(dataReceived){log.post("apiDataMgr",{sender:"companies.fetchFromAppFiles",status:"success"}),success(dataReceived[0])},function(){log.post("apiDataMgr",{sender:"companies.fetchFromAppFiles",status:"error"}),error()})},updateInPhone:function(callback){$q.all([promise.create("saving companies to mapStates dir on phone",phonesMemoryService.companies.save,{mapStateName:globalService.filter.objectsByPropsValues({id:activeIdService.mapState.getId()},mapStatesAndCategories.mapStatesData)[0].name,fileName:activeIdService.content1.getLastPathId(),fileData:JSON.stringify(companies.data)})]).then(function(){log.post("apiDataMgr",{sender:"companies.updateInPhone",status:"success"}),callback()},function(){log.post("apiDataMgr",{sender:"companies.updateInPhone",status:"error"}),callback()})},storeInVar:function(companiesObject,sortByProp,callback){void 0!==companiesObject&&void 0!==companiesObject.companies&&companiesObject.companies.length>0?(sortByProp&&(companiesObject.companies=globalService.sort.objectsByProp(sortByProp,companiesObject.companies)),companies.data=companiesObject,successfulCompaniesRequest.storeIds(),log.post("apiDataMgr",{sender:"companies.storeInVar",status:"done"}),callback&&callback()):companies.reset()},reset:function(callback){log.post("apiDataMgr",{sender:"companies.reset",status:"done"}),companies.data=void 0,callback&&callback()},getQueryString:function(mapStateId,categoryId){return"/getbycategory/"+categoryId+"/getbystate/"+mapStateId},getById:function(id){var filteredArray;return"active"===id&&(id=activeIdService.company.getId()),filteredArray=globalService.filter.objectsByPropsValues({id:id},companies.data.companies),filteredArray[0]},getArrayOfFieldsFromCurrentCompanies:function(field,lowerCase){var result=[],currentCompanies=companies.data;if(void 0!==currentCompanies&&currentCompanies.length>0)for(var i=0;i<currentCompanies.length;++i)lowerCase?result[i]=currentCompanies[i][field].toLowerCase():result[i]=currentCompanies[i][field];else result=void 0;return result}},filteredCompanies={fetch:function(args,finalCallBack){companies.reset(function(){filteredCompanies.fetchFromRemote(args,function(companiesObject){companies.storeInVar(companiesObject,"distance",function(){mapService.circle.setCenterMarker(companies.data.companies[0]),finalCallBack(companies.data.companies)})},function(){mapService.circle.setCenterMarker(void 0),companies.storeInVar(void 0),finalCallBack(void 0)})})},fetchFromRemote:function(args,success,error){$q.all([promise.create("filtered companies api request",httpService.requestData,{url:globalService.init.apiServerAddress,query:filteredCompanies.getQueryString(args)})]).then(function(dataReceived){void 0!==dataReceived[0].companies&&dataReceived[0].companies.length>0?(log.post("apiDataMgr",{sender:"filteredcompanies.fetchFromRemote",status:"success"}),success(dataReceived[0])):(log.post("apiDataMgr",{sender:"filteredcompanies.fetchFromRemote",status:"data empty or corrupt"}),error())},function(){log.post("apiDataMgr",{sender:"filteredcompanies.fetchFromRemote",status:"error"}),error()})},getQueryString:function(args){return angular.isDefined(args.lat)&&angular.isDefined(args.lng)?"/getbyradius/"+args.radius+"/lat/"+args.lat+"/lng/"+args.lng:angular.isDefined(args.activeFilterValue)?"/getbyradius/"+args.radius+"/postcode/"+args.activeFilterValue:void 0}},successfulCompaniesRequest={ids:{},storeIds:function(){var mapStateId=activeIdService.mapState.getId(),categoryId=activeIdService.content1.getLastPathId();void 0!==successfulCompaniesRequest.ids[mapStateId]?-1==$.inArray(categoryId,successfulCompaniesRequest.ids[mapStateId])&&successfulCompaniesRequest.ids[mapStateId].push(categoryId):successfulCompaniesRequest.ids[mapStateId]=[categoryId]},shouldSkipHttpRequest:function(mapStateId,categoryId){return void 0!==successfulCompaniesRequest.ids[mapStateId]&&$.inArray(categoryId,successfulCompaniesRequest.ids[mapStateId])>-1?!0:!1}};return{initDataInspect:initDataInspect,mapStatesAndCategories:mapStatesAndCategories,banners:banners,suburbs:suburbs,companies:companies,filteredCompanies:filteredCompanies,successfulCompaniesRequest:successfulCompaniesRequest}};apiDataManager.$inject=["$rootScope","$q","globalService","httpService","phonesMemoryService","activeIdService","mapService","promise","log","filterService","hardCodedDataService"],angular.module("appModule").service("apiDataManager",apiDataManager)}(),function(){var coreService=function($rootScope,$timeout,$interval,$q,$ionicHistory,$ionicScrollDelegate,$state,$cordovaDevice,$cordovaNetwork,globalService,activeIdService,httpService,mapService,apiDataManager,phonesMemoryService,msgDialogService,hardCodedDataService,log,promise,gps){var system={defaultOs:"Android",minRootViewTime:5e3,getScope:function(){return angular.element("body").scope()},getOrientation:function(flag){var width,height;return angular.isUndefined(flag)?(width=window.innerWidth,height=window.innerHeight):"!"==flag&&(width=window.innerHeight,height=window.innerWidth),height>=width?"portrait":"landscape"},lockOrientation:function(option){globalService.filter.byOnMobileFlag(function(){switch(option){case"current":system.lockOrientation(system.getOrientation());break;case"!current":system.lockOrientation(system.getOrientation("!"));break;case"portrait":init.screenObject.lockOrientation("portrait");break;case"landscape":init.screenObject.lockOrientation("landscape");break;case"unlock":init.screenObject.unlockOrientation()}})},closeMobileApp:function(){globalService.filter.byOnMobileFlag(function(){navigator.app.exitApp()})},openWebPage:function(url){window.open(url,"_blank"),log.post("nav",{sender:"system.openWebPage",url:url})},goToAppState:function(state){$state.go(state),log.post("nav",{sender:"system.goToAppState",state:state})},goBackInAppStateHistory:function(backCount){$ionicHistory.goBack(backCount),log.post("nav",{sender:"system.goBackInAppStateHistory","current state name":$ionicHistory.currentView().stateName,backCount:backCount})},handleInternetConnectionChange:function(){switch(window.google=void 0,mapService.mainGoogleMap.dispose(),mapService.smallGoogleMap.dispose(),$ionicHistory.currentView().stateName){case"content2":content2.handleReloadIconClick({needToChangeView:!1});break;case"content3":content3.handleBackButtonClick(!1,function(){content2.handleReloadIconClick({needToChangeView:!1})})}}},init={screenObject:void 0,currentOs:void 0,appStartTime:void 0,serviceEvents:function(service,rootScope,scope){var bindMethod=function(eventType,eventName){rootScope.$on(eventName,function(e,args){service.events[eventType][eventName](scope,args)})};if(service.events)for(var eventType in service.events)for(var eventName in service.events[eventType])bindMethod(eventType,eventName)},service:function(windowObject,screenObject){windowObject.cordova?(init.currentOs=$cordovaDevice.getPlatform(),$rootScope.$broadcast("$update",{app:{currentOs:init.currentOs}}),init.screenObject=screenObject,log.post("app",{sender:"coreService.init.service",cordova:"defined",currentOs:init.currentOs})):(init.currentOs=system.defaultOs,$rootScope.$broadcast("$update",{app:{currentOs:init.currentOs}}),log.post("app",{sender:"coreService.init.service",cordova:"undefined",currentOs:init.currentOs}))},timer:function(){init.appStartTime=(new Date).getTime()},appStyle:function(windowObject){windowObject.cordova&&windowObject.cordova.plugins.Keyboard&&cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),windowObject.StatusBar&&StatusBar.styleDefault()},injectedServices:function(windowObject){globalService.init.service(windowObject),phonesMemoryService.init.service()}},appReadiness={conditions:{initApiDataInspect:apiDataManager.initDataInspect.isDone,gpsInspect:gps.is.geoCheckDone},tempConditionsKeys:[],appReadyCheckInterval:1e3,fireChecking:function(singleConditionIndex,callback){appReadiness.tempConditionsKeys=Object.keys(appReadiness.conditions),void 0!==singleConditionIndex&&(appReadiness.tempConditionsKeys=[appReadiness.tempConditionsKeys[singleConditionIndex]]),$timeout(function(){var appReadyInterval=$interval(function(){switch(appReadiness.isReady()){case!0:log.post("app",{sender:"coreService.appReadiness.fireChecking",status:"cancelled"}),$interval.cancel(appReadyInterval),callback?callback():appReadiness.handleSuccess();break;case!1:}},appReadiness.appReadyCheckInterval)},system.minRootViewTime)},isReady:function(){for(var i=0;i<appReadiness.tempConditionsKeys.length;++i)if(!appReadiness.conditions[appReadiness.tempConditionsKeys[i]]())return log.post("app",{sender:"appReadiness.isReady",status:!1,"not ready":appReadiness.tempConditionsKeys[i]}),!1;return log.post("app",{sender:"appReadiness.isReady",status:!0,"evaluated against":appReadiness.tempConditionsKeys}),!0},handleSuccess:function(){if(void 0===gps.opt.usersLocation)appReadiness.mapStateNotKnownCase();else{var args={url:gps.opt.reverseGeoCoding,query:gps.opt.usersLocation.lat+","+gps.opt.usersLocation.lng};$q.all([promise.create("google location object request",httpService.requestData,args)]).then(function(dataReceived){log.post("gps",{"google location object request":"success"});for(var mapStates=apiDataManager.mapStatesAndCategories.mapStatesData,mapStatesNames=[],i=0;i<mapStates.length;++i)mapStatesNames[i]=mapStates[i].name;var stateIndex=gps.inspect.reverseGeoCodingObject(dataReceived[0],mapStatesNames);if(stateIndex>-1){count.extraDelay(system.minRootViewTime,init.appStartTime);$rootScope.$broadcast("$update",{currentView:{spinnerVisible:!1},filterWindow:{myLocationChecked:!0}}),$timeout(function(){system.goToAppState("content1"),$timeout(function(){system.lockOrientation("unlock")},500)}),activeIdService.mapState.setId(mapStates[stateIndex].id),activeIdService.content1.setIdsPath([{operName:"empty"},{operName:"push",newId:mapStates[stateIndex].id}]),content1.handleItemChoose({clickedItemId:mapStates[stateIndex].id})}else appReadiness.mapStateNotKnownCase()},function(){log.post("gps",{"google location object request":"error"}),appReadiness.mapStateNotKnownCase()})}},mapStateNotKnownCase:function(){log.post("gps",{sender:"appReadiness.mapStateNotKnownCase",status:"invoked"});var delay=count.extraDelay(system.minRootViewTime,init.appStartTime);gps.opt.usersLocation=void 0,globalService.filter.byOnMobileFlag(function(){$rootScope.$broadcast("$update",{currentView:{clickEventsOn:!1}})}),$timeout(function(){$rootScope.$broadcast("$update",{currentView:{spinnerVisible:!1}}),$timeout(function(){system.goToAppState("home"),$timeout(function(){$rootScope.$broadcast("$update",{home:{mapImgVisible:!0}}),system.lockOrientation("unlock"),$timeout(function(){msgDialogService.showMsgDialog("$locationError")},500)},500)})},delay)}},view={scrollToTop:function(handleName,animate){$timeout(function(){$ionicScrollDelegate.$getByHandle(handleName).scrollTo(0,0,animate)})},centerActiveItem:function(viewName,animate){var scope=system.getScope();if(angular.isDefined(scope[viewName].collection)){var activeItemId,listHeight,itemHeight,done=function(viewName,animate,yOffset){$timeout(function(){$ionicScrollDelegate.$getByHandle(viewName+"Handle").scrollTo(0,yOffset,animate)})};switch(viewName){case"content1":activeItemId=activeIdService.content1.getLastPathId(),listHeight=$("#content1View #listContainer").innerHeight(),itemHeight=content1.itemHeight;break;case"content2":activeItemId=activeIdService.company.getId(),listHeight=$("#content2View #content2ViewGrid #mainArea").innerHeight(),itemHeight=content2.itemHeight}for(var i=0;i<scope[viewName].collection.length;++i)if(scope[viewName].collection[i].id==activeItemId){var yOffset;0!==i?angular.isDefined(scope.view.banners)&&"mapStates"!=activeIdService.content1.getActiveCollectionName()?(yOffset=110+110*scope.view.banners.length+itemHeight*(i+1)-listHeight/2-itemHeight/2,done(viewName,animate,yOffset)):(yOffset=110+itemHeight*(i+1)-listHeight/2-itemHeight/2,done(viewName,animate,yOffset)):(yOffset=0,done(viewName,animate,yOffset));break}}}},home={handleSelectStateButtonClick:function(){var scope=system.getScope();log.post("nav",{sender:"home.handleSelectStateButtonClick",clickEventsOn:scope.currentView.clickEventsOn}),scope.currentView.clickEventsOn&&($rootScope.$broadcast("$update",{home:{mapImgVisible:!1}}),content1.setup(function(){system.goToAppState("content1")}))},handleBackButtonClick:function(isItDeviceBackButton){var scope=system.getScope();log.post("nav",{sender:"home.handleBackButtonClick",isItDeviceBackButton:isItDeviceBackButton,clickEventsOn:scope.currentView.clickEventsOn}),scope.currentView.clickEventsOn&&system.closeMobileApp()}},content1={itemHeight:60,setup:function(callback){var activeMapStateId=activeIdService.mapState.getId();activeIdService.content1.setIdsPath([{operName:"empty"},{operName:"push",
newId:activeMapStateId}]),content1.updateCollection({collectionName:"mapStates",updatedCollectionActiveItemId:activeMapStateId}),$rootScope.$broadcast("$update",{content1:{topNavTitle:hardCodedDataService.navBarTitle.content1[activeIdService.content1.getActiveCollectionName()]}}),callback&&$timeout(function(){callback()})},updateCollection:function(args){var newCollection;switch(args.collectionName){case"mapStates":newCollection=apiDataManager.mapStatesAndCategories.mapStatesData;break;case"categories":newCollection=apiDataManager.mapStatesAndCategories.categoriesData;break;case"subcategories":newCollection=apiDataManager.mapStatesAndCategories.getSubCategoriesByIdsPath(args.idsPath,args.skipLastId)}$timeout(function(){args.updatedCollectionActiveItemId&&args.collectionName?$rootScope.$broadcast("$update",{content1:{collection:newCollection,highlightedItemIndex:args.updatedCollectionActiveItemId},callback:function(){view.centerActiveItem("content1",!0)}}):args.collectionName?$rootScope.$broadcast("$update",{content1:{collection:newCollection},callback:function(){view.centerActiveItem("content1",!0)}}):args.updatedCollectionActiveItemId&&$rootScope.$broadcast("$update",{content1:{highlightedItemIndex:args.updatedCollectionActiveItemId},callback:function(){view.centerActiveItem("content1",!0)}})})},handleItemChoose:function(args){$rootScope.$broadcast("$update",{content1:{highlightedItemIndex:args.clickedItemId}});var content1Path=activeIdService.content1.getIdsPath();if(1==content1Path.length)log.post("nav",{sender:"content1.handleItemChoose",going:{from:"mapStates",to:"categories"}}),$rootScope.$broadcast("$update",{content1:{topNavTitle:hardCodedDataService.navBarTitle.content1.categories},view:{banners:apiDataManager.banners.getByStateAndCatId(args.clickedItemId)}}),activeIdService.mapState.setId(args.clickedItemId),activeIdService.content1.setIdsPath([{operName:"last",newId:args.clickedItemId},{operName:"push",newId:activeIdService.category.getId()}]),content1.updateCollection({collectionName:"categories",updatedCollectionActiveItemId:activeIdService.category.getId()});else if(content1Path.length>=2){var collectionObject;2==content1Path.length?($rootScope.$broadcast("$update",{view:{banners:apiDataManager.banners.getByStateAndCatId(activeIdService.mapState.getId(),args.clickedItemId)}}),collectionObject=globalService.filter.objectsByPropsValues({id:args.clickedItemId},apiDataManager.mapStatesAndCategories.categoriesData)[0],activeIdService.content1.setIdsPath([{operName:"last",newId:args.clickedItemId}]),activeIdService.category.setId(args.clickedItemId),content1.ifMoreSubCategoriesToShow({collectionObject:collectionObject,content1Path:content1Path},function(){log.post("nav",{sender:"content1.handleItemChoose",going:{from:"categories",to:"subcategories"}})},function(){log.post("nav",{sender:"content1.handleItemChoose",going:{from:"categories",to:"content2"}})})):content1Path.length>=3&&($rootScope.$broadcast("$update",{view:{banners:apiDataManager.banners.getByStateAndCatId(activeIdService.mapState.getId(),args.clickedItemId)}}),collectionObject=apiDataManager.mapStatesAndCategories.getSubCategoriesByIdsPath(content1Path,!0)[0],activeIdService.content1.setIdsPath([{operName:"last",newId:args.clickedItemId}]),activeIdService.subcategory.setId(activeIdService.content1.getIdsPath(!0),args.clickedItemId),content1.ifMoreSubCategoriesToShow({collectionObject:collectionObject,content1Path:content1Path},function(){log.post("nav",{sender:"content1.handleItemChoose",going:{from:"subcategories",to:"subcategories"}})},function(){log.post("nav",{sender:"content1.handleItemChoose",going:{from:"subcategories",to:"content2"}})}))}},ifMoreSubCategoriesToShow:function(args,successCallback,failCallback){if(angular.isDefined(args.collectionObject.subcategories)){successCallback&&successCallback(),content1.updateCollection({collectionName:"subcategories",idsPath:args.content1Path,skipLastId:!1});for(var filteredContent1Path=[],i=1;i<args.content1Path.length;++i)filteredContent1Path[i-1]=args.content1Path[i];var subCategoryId=activeIdService.subcategory.getId(filteredContent1Path);return activeIdService.content1.setIdsPath([{operName:"push",newId:subCategoryId}]),$rootScope.$broadcast("$update",{content1:{topNavTitle:hardCodedDataService.navBarTitle.content1.subcategories,highlightedItemIndex:subCategoryId}}),!0}failCallback&&failCallback(),content2.beforeSetup({needToChangeView:!0}),content2.setup({objectName:"companies",forceHttpRequest:!1})},handleBackButtonClick:function(isItDeviceBackButton){var scope=system.getScope();if(scope.currentView.clickEventsOn){var content1Path=activeIdService.content1.getIdsPath();switch(content1Path.length){case 1:system.closeMobileApp();break;case 2:log.post("nav",{sender:"content1.handleBackButtonClick",isItDeviceBackButton:isItDeviceBackButton,clickEventsOn:scope.currentView.clickEventsOn,going:{from:"categories",to:"mapStates"}}),$rootScope.$broadcast("$update",{content1:{topNavTitle:hardCodedDataService.navBarTitle.content1.mapStates}}),activeIdService.content1.setIdsPath([{operName:"pop"}]),content1.updateCollection({collectionName:"mapStates",updatedCollectionActiveItemId:activeIdService.content1.getLastPathId()}),isItDeviceBackButton&&$rootScope.$apply();break;case 3:log.post("nav",{sender:"content1.handleBackButtonClick",isItDeviceBackButton:isItDeviceBackButton,clickEventsOn:scope.currentView.clickEventsOn,going:{from:"subcategories",to:"categories"}}),$rootScope.$broadcast("$update",{content1:{topNavTitle:hardCodedDataService.navBarTitle.content1.categories},view:{banners:apiDataManager.banners.getByStateAndCatId(activeIdService.mapState.getId())}}),activeIdService.content1.setIdsPath([{operName:"pop"}]),content1.updateCollection({collectionName:"categories",updatedCollectionActiveItemId:activeIdService.content1.getLastPathId()}),isItDeviceBackButton&&$rootScope.$apply();break;default:log.post("nav",{sender:"content1.handleBackButtonClick",isItDeviceBackButton:isItDeviceBackButton,clickEventsOn:scope.currentView.clickEventsOn,going:{from:"subcategories",to:"subcategories"}});var idsPath=activeIdService.content1.getIdsPath(!0);$rootScope.$broadcast("$update",{content1:{topNavTitle:hardCodedDataService.navBarTitle.content1.subcategories},view:{banners:apiDataManager.banners.getByStateAndCatId(idsPath[idsPath.length-1])}}),activeIdService.content1.setIdsPath([{operName:"pop"}]),content1.updateCollection({collectionName:"subcategories",idsPath:activeIdService.content1.getIdsPath(),skipLastId:!0,updatedCollectionActiveItemId:activeIdService.content1.getLastPathId()}),isItDeviceBackButton&&$rootScope.$apply()}}else log.post("nav",{sender:"content1.handleBackButtonClick",isItDeviceBackButton:isItDeviceBackButton,clickEventsOn:scope.currentView.clickEventsOn})},handleRefreshButtonClick:function(){var scope=system.getScope();log.post("nav",{sender:"content1.handleRefreshButtonClick",clickEventsOn:scope.currentView.clickEventsOn}),scope.currentView.clickEventsOn&&($rootScope.$broadcast("$update",{currentView:{clickEventsOn:!1,spinnerVisible:!0}}),apiDataManager.initDataInspect.markAsNotDone(function(){appReadiness.fireChecking(0,function(){$timeout(function(){$rootScope.$broadcast("$update",{content1:{topNavTitle:hardCodedDataService.navBarTitle.content1.mapStates},currentView:{spinnerVisible:!1,clickEventsOn:!0}}),content1.setup()},1e3)})}),apiDataManager.mapStatesAndCategories.fetch(),apiDataManager.banners.fetch())},handleOrientationChange:function(){$timeout(function(){view.centerActiveItem("content1",!0)},300)}},content2={itemHeight:110,isCollectionMapBoundsCheckBeingDone:!1,noItemsSettings:{collection:[],activeCompanyObject:void 0,companyId:void 0},beforeSetup:function(args){system.lockOrientation("current"),$rootScope.$broadcast("$update",{currentView:{clickEventsOn:!1},content2:{mainGoogleMapVisible:!1,mapViewOn:!0,noMapInfoVisible:!1,collection:void 0}}),args.needToChangeView?($ionicHistory.nextViewOptions({disableAnimate:!0}),system.goToAppState("content2"),$timeout(function(){$rootScope.$broadcast("$update",{currentView:{spinnerVisible:!0}})},200)):$timeout(function(){$rootScope.$broadcast("$update",{currentView:{spinnerVisible:!0}})})},setup:function(args){log.post("app",{sender:"coreService.content2.setup",args:args}),apiDataManager[args.objectName].fetch(args,function(companiesArray){var afterSetupSettings={currentView:{spinnerVisible:!1,clickEventsOn:!0}};$timeout(function(){var activeMapStateObject=globalService.filter.objectsByPropsValues({id:activeIdService.mapState.getId()},apiDataManager.mapStatesAndCategories.mapStatesData)[0],hardCodedMapStateObject=globalService.filter.objectsByPropsValues({name:activeMapStateObject.name.trim()},hardCodedDataService.states)[0];mapService.mainGoogleMap.setup({mapOptions:{center:hardCodedMapStateObject.center,zoom:hardCodedMapStateObject.zoom},mapMarkers:companiesArray,radius:args.radius},function(){mapService.mainGoogleMap.fireReadyChecking(function(){companiesArray?content2.doCollectionMapBoundsCheck(companiesArray,function(content2Settings){afterSetupSettings.content2=content2Settings,afterSetupSettings.content2.companyId=content2Settings.companyId,afterSetupSettings.content2.mainGoogleMapVisible=!0,content2.afterSetup(afterSetupSettings)}):(afterSetupSettings.content2=content2.noItemsSettings,afterSetupSettings.content2.mainGoogleMapVisible=!0,content2.afterSetup(afterSetupSettings))})},function(){companiesArray?(afterSetupSettings.content2={collection:companiesArray,activeCompanyObject:companiesArray[0],companyId:companiesArray[0].id,mainGoogleMapVisible:!1,noMapInfoVisible:!0},content2.afterSetup(afterSetupSettings)):(afterSetupSettings.content2=content2.noItemsSettings,afterSetupSettings.content2.mainGoogleMapVisible=!1,afterSetupSettings.content2.noMapInfoVisible=!0,content2.afterSetup(afterSetupSettings))})},1e3)})},doCollectionMapBoundsCheck:function(collection,callback){if(content2.isCollectionMapBoundsCheckBeingDone)log.post("app",{sender:"coreService.content2.doCollectionMapBoundsCheck",status:"beingFiltered"});else{content2.isCollectionMapBoundsCheckBeingDone=!0;system.getScope();if(angular.isUndefined(collection)&&angular.isDefined(apiDataManager.companies.data)&&(collection=apiDataManager.companies.data.companies),angular.isDefined(collection)&&collection.length>0){for(var content2Settings,newActiveCompanyObject,filteredCompaniesArray=[],mapBounds=mapService.mainGoogleMap.instance.getBounds(),i=0;i<collection.length;++i)mapService.marker.isWithinMapBounds(mapBounds,collection[i])&&filteredCompaniesArray.push(collection[i]);filteredCompaniesArray.length>0?(angular.isUndefined(newActiveCompanyObject)&&(newActiveCompanyObject=filteredCompaniesArray[0]),content2Settings={collection:filteredCompaniesArray,activeCompanyObject:newActiveCompanyObject,companyId:newActiveCompanyObject.id}):content2Settings=content2.noItemsSettings,log.post("app",{sender:"coreService.content2.doCollectionMapBoundsCheck",status:"done","collection.length":collection.length,"filteredCompaniesArray.length":filteredCompaniesArray.length}),content2.isCollectionMapBoundsCheckBeingDone=!1,callback&&callback(content2Settings)}else content2.isCollectionMapBoundsCheckBeingDone=!1}},afterSetup:function(args){switch(activeIdService.company.setId(args.content2.companyId),mapService.mainGoogleMap.isInitialized()){case!0:args.callback=function(){view.centerActiveItem("content2",!0),system.lockOrientation("unlock")},$rootScope.$broadcast("$update",args),mapService.mainGoogleMap.refresh();break;case!1:$timeout(function(){args.callback=function(){view.centerActiveItem("content2",!0),system.lockOrientation("unlock")},$rootScope.$broadcast("$update",args),$rootScope.$apply()},50)}},handleItemChoose:function(args){log.post("nav",{sender:"content2.handleItemChoose",args:args}),activeIdService.company.setId(args.clickedItemId),$rootScope.$broadcast("$update",{currentView:{clickEventsOn:!1},content2:{noMapInfoVisible:!1,smallGoogleMapVisible:!1,activeCompanyObject:apiDataManager.companies.getById(args.clickedItemId)}}),$timeout(function(){system.goToAppState("content3"),view.scrollToTop("content3Handle",!1),$timeout(function(){$rootScope.$broadcast("$update",{currentView:{spinnerVisible:!0}}),content3.setup()},500)})},handleBackButtonClick:function(isItDeviceBackButton){var scope=system.getScope();if(log.post("nav",{sender:"content2.handleBackButtonClick",isItDeviceBackButton:isItDeviceBackButton,clickEventsOn:scope.currentView.clickEventsOn}),scope.currentView.clickEventsOn){var idsPath=activeIdService.content1.getIdsPath(!0);$rootScope.$broadcast("$update",{content2:{mainGoogleMapVisible:!1},view:{banners:apiDataManager.banners.getByStateAndCatId(activeIdService.mapState.getId(),idsPath[idsPath.length-1])}}),mapService.mainGoogleMap.dispose(),system.goBackInAppStateHistory(-1),$timeout(function(){content1.updateCollection({updatedCollectionActiveItemId:activeIdService.content1.getLastPathId()})})}},handleAppLogoClick:function(){var scope=system.getScope();scope.currentView.clickEventsOn&&system.openWebPage(hardCodedDataService.view.shared.logoHref)},handleNavPanelIconClick:function(iconName){var scope=system.getScope();if(log.post("nav",{sender:"content2.handleNavPanelIconClick",iconName:iconName,clickEventsOn:scope.currentView.clickEventsOn}),scope.currentView.clickEventsOn)switch(iconName){case"stateIcon":$rootScope.$broadcast("$update",{content2:{mainGoogleMapVisible:!1}}),mapService.mainGoogleMap.dispose(),$timeout(function(){content1.setup(function(){system.goBackInAppStateHistory(-1)})});break;case"postcodeIcon":system.goToAppState("filterWindow");break;case"mapIcon":$rootScope.$broadcast("$update",{content2:{mapViewOn:!0}});break;case"listIcon":$rootScope.$broadcast("$update",{content2:{mapViewOn:!1},callback:function(){view.centerActiveItem("content2",!0)}});break;case"reloadIcon":content2.handleReloadIconClick({needToChangeView:!1})}},handleReloadIconClick:function(args){var scope=system.getScope();log.post("nav",{sender:"content2.handleReloadIconClick",clickEventsOn:scope.currentView.clickEventsOn}),scope.currentView.clickEventsOn&&(content2.beforeSetup({needToChangeView:args.needToChangeView}),content2.setup({objectName:"companies",forceHttpRequest:!0}))},handleOrientationChange:function(orientation){globalService.options.blockOrientationChangeEvent||(globalService.options.blockOrientationChangeEvent=!0,angular.isDefined(orientation)?system.lockOrientation(orientation):"Android"==init.currentOs?system.lockOrientation("!current"):"iOS"==init.currentOs&&system.lockOrientation("current"),$rootScope.$broadcast("$update",{currentView:{clickEventsOn:!1,spinnerVisible:!0},callback:function(){if(mapService.mainGoogleMap.isInitialized())if(mapService.infoWindow.close(),mapService.circle.isSetup())$timeout(function(){mapService.mainGoogleMap.instance.setCenter(new google.maps.LatLng(mapService.circle.centerMarker.latitude,mapService.circle.centerMarker.longitude)),mapService.mainGoogleMap.instance.fitBounds(mapService.circle.instance.getBounds())},500),$timeout(function(){$rootScope.$broadcast("$doCollectionMapBoundsCheck",{callback:function(content2Settings){activeIdService.company.setId(content2Settings.companyId),$rootScope.$broadcast("$update",{content2:content2Settings,callback:function(){$rootScope.$broadcast("$update",{currentView:{spinnerVisible:!1,clickEventsOn:!0}}),globalService.options.blockOrientationChangeEvent=!1,system.lockOrientation("unlock"),view.centerActiveItem("content2",!0)}})}})},1e3);else{var scope=system.getScope();if(angular.isDefined(scope.filterWindow.activeRadius)){var activeMapStateObject=globalService.filter.objectsByPropsValues({id:activeIdService.mapState.getId()},apiDataManager.mapStatesAndCategories.mapStatesData)[0],hardCodedMapStateObject=globalService.filter.objectsByPropsValues({name:activeMapStateObject.name.trim()},hardCodedDataService.states)[0];$timeout(function(){mapService.mainGoogleMap.instance.setZoom(hardCodedMapStateObject.zoom),mapService.mainGoogleMap.instance.setCenter(hardCodedMapStateObject.center)},500)}else $timeout(function(){mapService.mainGoogleMap.instance.fitBounds(mapService.mainGoogleMap.bounds)},500);$timeout(function(){$rootScope.$broadcast("$doCollectionMapBoundsCheck",{callback:function(content2Settings){activeIdService.company.setId(content2Settings.companyId),$rootScope.$broadcast("$update",{content2:content2Settings,callback:function(){$rootScope.$broadcast("$update",{currentView:{spinnerVisible:!1,clickEventsOn:!0}}),globalService.options.blockOrientationChangeEvent=!1,system.lockOrientation("unlock"),view.centerActiveItem("content2",!0)}})}})},1e3)}else $rootScope.$broadcast("$update",{currentView:{spinnerVisible:!1,clickEventsOn:!0}}),globalService.options.blockOrientationChangeEvent=!1,system.lockOrientation("unlock"),view.centerActiveItem("content2",!0)}}))}},filterWindow={postCodeRegex:new RegExp("^[0-9]{4}$"),suburbRegex:new RegExp("^[a-zA-Z ]+$"),radiusRegex:new RegExp("^([1-9]|[1-9][0-9])$"),handleBackButtonClick:function(){var scope=system.getScope();scope.currentView.clickEventsOn&&$rootScope.$broadcast("$update",{content2:{mainGoogleMapVisible:!1},callback:function(){mapService.mainGoogleMap.refresh(),system.goBackInAppStateHistory(-1),$timeout(function(){content2.handleOrientationChange("current"),$rootScope.$broadcast("$update",{content2:{mainGoogleMapVisible:!0}})},500)}})},handleSearchButtonClick:function(){var endingProcedures=function(args){$rootScope.$broadcast("$update",{content2:{mainGoogleMapVisible:!1}}),system.goBackInAppStateHistory(-1),$timeout(function(){mapService.mainGoogleMap.refresh(),content2.beforeSetup({needToChangeView:!1}),content2.setup(args)},300)},scope=system.getScope();if(scope.currentView.clickEventsOn){var options={};options=gps.opt.usersLocation&&scope.filterWindow.myLocationChecked?{objectName:"filteredCompanies",forceHttpRequest:!0,lat:gps.opt.usersLocation.lat,lng:gps.opt.usersLocation.lng,activeFilterValue:void 0,radius:scope.filterWindow.activeRadius}:{objectName:"filteredCompanies",forceHttpRequest:!0,lat:void 0,lng:void 0,activeFilterValue:scope.filterWindow.activeFilterValue,radius:scope.filterWindow.activeRadius},log.post("nav",{sender:"filterWindow.handleSearchButtonClick",args:options,clickEventsOn:scope.currentView.clickEventsOn}),filterWindow.validateInput(options,function(args){angular.isDefined(args.bySuburb)?apiDataManager.suburbs.getPostCodeBySuburb(args,function(postCode){angular.isDefined(postCode)?(args.activeFilterValue=postCode,endingProcedures(args)):msgDialogService.showMsgDialog("$getPostCodeBySuburbError")},function(){msgDialogService.showMsgDialog("$getPostCodeBySuburbError")}):endingProcedures(args)})}},handleResetButtonClick:function(){var scope=system.getScope();scope.currentView.clickEventsOn&&($rootScope.$broadcast("$update",{content2:{mainGoogleMapVisible:!1}}),system.goBackInAppStateHistory(-1),$timeout(function(){mapService.mainGoogleMap.refresh(),content2.beforeSetup({needToChangeView:!1}),content2.setup({objectName:"companies",forceHttpRequest:!1})},300))},validateInput:function(args,successCallback){system.getScope();if(angular.isDefined(args.activeFilterValue))if(apiDataManager.suburbs.isValidSuburb(args.activeFilterValue))args.bySuburb=!0;else{if(!filterWindow.postCodeRegex.test(args.activeFilterValue))return void msgDialogService.showMsgDialog("$wrongFilterData");$rootScope.$broadcast("$update",{filterWindow:{activeFilterValue:String(args.activeFilterValue).trim()}})}filterWindow.radiusRegex.test(args.radius)?($rootScope.$broadcast("$update",{filterWindow:{activeRadius:args.radius}}),successCallback(args)):msgDialogService.showMsgDialog("$wrongRadius")}},content3={setup:function(){mapService.smallGoogleMap.setup(apiDataManager.companies.getById("active"),function(){$timeout(function(){$rootScope.$broadcast("$update",{currentView:{spinnerVisible:!1,clickEventsOn:!0},content2:{smallGoogleMapVisible:!0}}),$rootScope.$apply()},500)},function(){$timeout(function(){$rootScope.$broadcast("$update",{currentView:{spinnerVisible:!1,clickEventsOn:!0},content2:{noMapInfoVisible:!0}}),$rootScope.$apply()},500)})},handleBackButtonClick:function(isItDeviceBackButton,callback){var scope=system.getScope();log.post("nav",{sender:"content3.handleBackButtonClick",isItDeviceBackButton:isItDeviceBackButton,clickEventsOn:scope.currentView.clickEventsOn}),scope.currentView.clickEventsOn&&($rootScope.$broadcast("$update",{content2:{smallGoogleMapVisible:!1,mainGoogleMapVisible:!1}}),system.goBackInAppStateHistory(-1),$timeout(function(){mapService.mainGoogleMap.isInitialized()?$rootScope.$broadcast("$update",{content2:{mainGoogleMapVisible:!0},callback:function(){view.centerActiveItem("content2",!0),mapService.mainGoogleMap.refresh()}}):$rootScope.$broadcast("$update",{content2:{noMapInfoVisible:!0},callback:function(){view.centerActiveItem("content2",!0)}}),callback&&callback()},400))},handleOrientationChange:function(){if(view.scrollToTop("content3Handle",!1),mapService.smallGoogleMap.isInitialized()){var activeCompany=apiDataManager.companies.getById("active");$timeout(function(){mapService.smallGoogleMap.instance.panTo({lat:Number(activeCompany.latitude),lng:Number(activeCompany.longitude)})},500)}}},is={landscapeOrientationOn:function(){return"landscape"==init.screenObject.orientation.type||"landscape-primary"==init.screenObject.orientation.type?!0:!1},googleApiLoaded:function(){return window.google?!0:!1},listItemBanner:function(listItemObject){return angular.isDefined(listItemObject.big_imag_url)?!0:!1}},count={extraDelay:function(minTime,start){var timeTaken=(new Date).getTime()-start,extraDelay=minTime-timeTaken;return 0>extraDelay&&(extraDelay=0),log.post("app",{sender:"count.extraDelay",timeTaken:timeTaken,extraDelay:extraDelay}),extraDelay}},events={$ionicView:{"$ionicView.loaded":function(scope,args){log.post("nav",{sender:"events.$ionicView.loaded",args:args})},"$ionicView.unloaded":function(scope,args){switch(args.stateName){case"content2":$rootScope.$broadcast("$update",{content2:{mainGoogleMapVisible:!1}}),mapService.mainGoogleMap.dispose();break;case"content3":$rootScope.$broadcast("$update",{content2:{smallGoogleMapVisible:!1}}),mapService.smallGoogleMap.dispose("smallGoogleMap")}log.post("nav",{sender:"events.$ionicView.unloaded",args:args})}},$cordovaNetwork:{"$cordovaNetwork:online":function(scope,args){log.post("app",{sender:"events.$cordovaNetwork",args:args,status:"online"}),system.handleInternetConnectionChange()},"$cordovaNetwork:offline":function(scope,args){log.post("app",{sender:"events.$cordovaNetwork",args:args,status:"offline"}),system.handleInternetConnectionChange()}},apiData:{$afterMapStatesAndCategoriesInitDataInspect:function(scope,args){var mapStates=apiDataManager.mapStatesAndCategories.mapStatesData,categories=apiDataManager.mapStatesAndCategories.categoriesData;activeIdService.init.service(mapStates,categories)}},map:{$doCollectionMapBoundsCheck:function(scope,args){content2.doCollectionMapBoundsCheck(args.collection,args.callback)}},msgDialog:{$onLocationErrorAlertClose:function(scope,args){$rootScope.$broadcast("$update",{currentView:{clickEventsOn:!0}})}}};return{system:system,init:init,appReadiness:appReadiness,view:view,home:home,content1:content1,content2:content2,filterWindow:filterWindow,content3:content3,is:is,count:count,events:events,scopeMethods:{openWebPage:system.openWebPage,isGoogleApiLoaded:is.googleApiLoaded,home:{handleSelectStateButtonClick:home.handleSelectStateButtonClick,handleBackButtonClick:home.handleBackButtonClick},content1:{handleItemChoose:content1.handleItemChoose,handleBackButtonClick:content1.handleBackButtonClick,handleRefreshButtonClick:content1.handleRefreshButtonClick},content2:{handleItemChoose:content2.handleItemChoose,handleBackButtonClick:content2.handleBackButtonClick,handleAppLogoClick:content2.handleAppLogoClick,handleNavPanelIconClick:content2.handleNavPanelIconClick},filterWindow:{handleBackButtonClick:filterWindow.handleBackButtonClick,handleSearchButtonClick:filterWindow.handleSearchButtonClick,handleResetButtonClick:filterWindow.handleResetButtonClick},content3:{handleBackButtonClick:content3.handleBackButtonClick}}}};coreService.$inject=["$rootScope","$timeout","$interval","$q","$ionicHistory","$ionicScrollDelegate","$state","$cordovaDevice","$cordovaNetwork","globalService","activeIdService","httpService","mapService","apiDataManager","phonesMemoryService","msgDialogService","hardCodedDataService","log","promise","gps"],angular.module("appModule").service("coreService",coreService)}(),function(){var filterService=function(){var objectsByAnotherCollection=function(propsNamesToCompare,collectionToFilter,collectionToCompareWith){for(var result=[],i=0;i<propsNamesToCompare.length;++i)for(var j=0;j<collectionToFilter.length;++j)for(var k=0;k<collectionToCompareWith.length;++k)void 0!==collectionToFilter[j][propsNamesToCompare[i]]&&void 0!==collectionToCompareWith[k][propsNamesToCompare[i]]&&collectionToFilter[j][propsNamesToCompare[i]]===collectionToCompareWith[k][propsNamesToCompare[i]]&&result.push(collectionToFilter[j]);return result},objectsProps=function(target,propsToInclude){var i,j,result;if(angular.isArray(target))for(result=[],i=0;i<target.length;++i){var obj={};for(j=0;j<propsToInclude.length;++j)obj[propsToInclude[j]]=target[i][propsToInclude[j]];result.push(obj)}else for(result={},i=0;i<propsToInclude.length;++i)result[propsToInclude[i]]=target[propsToInclude[i]];return result};return{objectsByAnotherCollection:objectsByAnotherCollection,objectsProps:objectsProps}};filterService.$inject=[],angular.module("appModule").service("filterService",filterService)}(),function(){var globalService=function($q,$http){var options={myLocation:"home",allowSendingLogs:!0,blockOrientationChangeEvent:!1},urls={api:"http://www.civilconnectapp.com.au/api",apiProxy:"/api"},init={onMobile:void 0,apiServerAddress:void 0,service:function(windowObject){windowObject.cordova?(init.onMobile=!0,init.apiServerAddress=urls.api):(init.onMobile=!1,init.apiServerAddress=urls.apiProxy)}},sort={objectsByProp:function(prop,arrayOfObjects){var result=arrayOfObjects.sort(function(objA,objB){return objA[prop]<objB[prop]?-1:objA[prop]>objB[prop]?1:0});return result}},filter={byOnMobileFlag:function(whenTrueMethod,whenFalseMethod,args){switch(init.onMobile){case!0:whenTrueMethod&&whenTrueMethod(args);break;case!1:whenFalseMethod&&whenFalseMethod(args)}},objectsByPropsValues:function(expectedPropsValuesObj,arrayOfObjects){var i,j,result=[];for(i=0;i<arrayOfObjects.length;++i){var accepted=!0,keys=Object.keys(expectedPropsValuesObj);for(j=0;j<keys.length;++j)if(void 0!==arrayOfObjects[i][keys[j]]&&arrayOfObjects[i][keys[j]]!==expectedPropsValuesObj[keys[j]]){accepted=!1;break}accepted&&result.push(arrayOfObjects[i])}return result}};return{options:options,urls:urls,init:init,sort:sort,filter:filter}};globalService.$inject=["$q","$http"],angular.module("appModule").service("globalService",globalService)}(),function(){var gps=function($rootScope,$cordovaGeolocation,globalService,log){var opt={reverseGeoCoding:"https://maps.googleapis.com/maps/api/geocode/json?latlng=",expectedCountry:"Australia",usersLocation:void 0,reverseGeoCodingObject:void 0,geoCheckDone:!1},inspect={locationServices:function(currentOs){var options={};switch(currentOs){case"Android":options={enableHighAccuracy:!0,timeout:1e4};break;case"iOS":options={enableHighAccuracy:!0}}opt.geoCheckDone=!1,$cordovaGeolocation.getCurrentPosition(options).then(function(success){opt.geoCheckDone=!0,opt.usersLocation={lat:success.coords.latitude,lng:success.coords.longitude},log.post("gps",{usersLocation:opt.usersLocation})},function(error){opt.geoCheckDone=!0,opt.usersLocation=void 0,log.post("gps",{usersLocation:"could not determine"})})},reverseGeoCodingObject:function(rgcObj,statesNamesArray){if("OK"==rgcObj.status){opt.reverseGeoCodingObject=rgcObj;var country=inspect.reverseGeoCodingValue(rgcObj,"country","long_name");if(log.post("gps",{"country expected":opt.expectedCountry,"country determined":country}),country===opt.expectedCountry){var state=inspect.reverseGeoCodingValue(rgcObj,"administrative_area_level_1","short_name"),index=statesNamesArray.indexOf(state),postCode=inspect.reverseGeoCodingValue(rgcObj,"postal_code","long_name");return $rootScope.$broadcast("$update",{filterWindow:{gpsPostCode:postCode}}),log.post("gps",{"state determined":state,"gps postcode determined":postCode}),index}return-1}return opt.reverseGeoCodingObject=void 0,-1},reverseGeoCodingValue:function(rgcObj,typeOfValue,valueLengthType){for(var i=0;i<rgcObj.results.length;++i)if(angular.isDefined(rgcObj.results[i].address_components))for(var j=0;j<rgcObj.results[i].address_components.length;++j)if(angular.isDefined(rgcObj.results[i].address_components[j].types)&&angular.isDefined(rgcObj.results[i].address_components[j].types)&&rgcObj.results[i].address_components[j].types.indexOf(typeOfValue)>-1)return rgcObj.results[i].address_components[j][valueLengthType];return void 0}},is={geoCheckDone:function(){return opt.geoCheckDone?!0:!1}};return{opt:opt,inspect:inspect,is:is}};gps.$inject=["$rootScope","$cordovaGeolocation","globalService","log"],angular.module("appModule").service("gps",gps)}(),function(){var hardCodedDataService=function(){return{view:{home:{button1Text:"Click to select state"},infoWindow:{viewMoreButtonText:"View more"},content2:{noItemsInfo:"No items to display"},filterWindow:{winTitle:"POSTCODE / SUBURB",myLocationCheckBox:{label:"Use GPS location"},option:{label:"Postcode / suburb"},radius:{label:"Radius (km)"},button:{label1:"Search",label2:"Reset"}},content3:{title1:"Business details",title2:"Map view"},shared:{text1:"CIVIL CONNECT SOLUTIONS",logoHref:"http://civilconnectapp.com.au/",noMapInfo:"Couldn't load map."}},navBarTitle:{content1:{mapStates:"SELECT STATE",categories:"SELECT CATEGORY",subcategories:"SELECT SUBCATEGORY"},content2:"RESULTS",content3:"DETAILS"},msgDialog:{titles:{title1:"Info",title2:"Filter"},messages:{message1:"We were unable to determine state you're in, you have to select it manually.",message2:"There's nothing to be filtered.",message3:"Wrong postcode or suburb. If you cannot find suburb enter 4-digit postcode number.",message4:"Error getting postcode of the suburb you have chosen.",message5:"Radius should be between 1 and 99 km.",message6:"Wrong input for suburb."},buttonLabels:{label1:"Got it",label2:"Cancel",label3:"OK"}},states:[{id:1,name:"ACT",center:{lat:-35.528048,lng:148.590088},zoom:6},{id:2,name:"NSW",center:{lat:-33.632916,lng:146.711426},zoom:5},{id:3,name:"NT",center:{lat:-19.165925,lng:133.615722},zoom:5},{id:4,name:"QLD",center:{lat:-21.227942,lng:145.437011},zoom:5},{id:6,name:"SA",center:{lat:-31.484894,lng:134.890136},zoom:5},{id:7,name:"TAS",center:{lat:-42.163403,lng:146.524658},zoom:7},{id:8,name:"VIC",center:{lat:-36.844461,lng:145.217285},zoom:6},{id:9,name:"WA",center:{lat:-26.135714,lng:121.486816},zoom:5}]}};angular.module("appModule").service("hardCodedDataService",hardCodedDataService)}(),function(){var httpService=function($rootScope,$http,globalService,log){var httpTimeOut=15e3;return{requestData:function(args,successCallBack,errorCallBack){$http.get(args.url+args.query,{timeout:httpTimeOut}).success(function(dataReceived,status,headers,config){successCallBack&&successCallBack(dataReceived),log.post("http",{status:status,args:args,dataReceived:{type:jQuery.type(dataReceived),length:dataReceived.length}})}).error(function(dataReceived,status,headers,config){errorCallBack&&errorCallBack(),log.post("http",{status:status,args:args,dataReceived:{type:jQuery.type(dataReceived)}})})}}};httpService.$inject=["$rootScope","$http","globalService","log"],angular.module("appModule").service("httpService",httpService)}(),function(){var log=function($rootScope,$http,$timeout,globalService){var urls={home:"http://192.168.0.103:7100",work:"http://192.168.1.20:7100",school:""
},init=function(){reset("app"),reset("nav"),reset("id"),reset("gps"),reset("http"),reset("promise"),reset("apiDataMgr"),reset("memory"),reset("dialog"),reset("map")},post=function(routeName,dataToLog){if(globalService.options.allowSendingLogs){var url="/"+routeName;globalService.init.onMobile&&(url=urls[globalService.options.myLocation]+url),$http({url:url,method:"POST",data:dataToLog,headers:{"Content-Type":"application/json"}})}},reset=function(routeName,onMobile){post(routeName,void 0,onMobile)};return{urls:urls,init:init,post:post,reset:reset}};log.$inject=["$rootScope","$http","$timeout","globalService"],angular.module("appModule").service("log",log)}(),function(){var mapService=function($rootScope,$compile,$parse,$timeout,$interval,$window,$ionicHistory,httpService,activeIdService,globalService,log,scripts){var map={readyIntervalTime:1e3,defaultMapCenter:{lat:0,lng:0},defaultMapZoom:5,markerIconUrl:"img/marker2.png",isReadyToSetup:function(args,successCallback,failCallback){args.mapServiceObject.isInitialized()?(log.post("map",{sender:args.mapServiceObject.name+".isReadyToSetup",info:"map already initialized"}),successCallback()):window.google&&window.InfoBox?(log.post("map",{sender:args.mapServiceObject.name+".isReadyToSetup",info:"all necessary libs loaded, can initialize"}),args.mapServiceObject.init(args,successCallback)):(window.google=void 0,window.InfoBox=void 0,scripts.load.mapScripts(function(){window.google&&window.InfoBox?(log.post("map",{sender:args.mapServiceObject.name+".isReadyToSetup",info:"managed to load all necessary libs"}),args.mapServiceObject.init(args,successCallback)):(log.post("map",{sender:args.mapServiceObject.name+".isReadyToSetup",info:"could not load all necessary libs"}),failCallback())}))}},marker={isWithinMapBounds:function(mapBounds,marker){return mapBounds.contains(new google.maps.LatLng(marker.latitude,marker.longitude))?!0:!1}},mainGoogleMap={name:"mainGoogleMap",defaultMapZoom:5,instance:void 0,markersObjects:[],activeMarker:void 0,tilesLoaded:!1,bounds:void 0,init:function(args,callback){mainGoogleMap.instance=new google.maps.Map(document.getElementById("mainGoogleMap"),{center:map.defaultMapCenter,zoom:mainGoogleMap.defaultMapZoom}),$rootScope.$broadcast("$update",{content2:{mainMapInstance:mainGoogleMap.instance}}),mainGoogleMap.instance.addListener("click",function(){infoWindow.close(),mainGoogleMap.activeMarker=void 0,$rootScope.$broadcast("$update",{content2:{activeMarker:void 0}})}),mainGoogleMap.instance.addListener("tilesloaded",function(){log.post("map",{sender:"mainGoogleMap.$tilesloaded",status:"invoked"}),mainGoogleMap.tilesLoaded=!0}),mainGoogleMap.instance.addListener("bounds_changed",function(){globalService.options.blockOrientationChangeEvent||mainGoogleMap.isReadyToShow()&&mainGoogleMap.isInitialized()&&"content2"==$ionicHistory.currentView().stateName&&(log.post("map",{sender:"mainGoogleMap.$bounds_changed",status:"invoked"}),$rootScope.$broadcast("$doCollectionMapBoundsCheck",{callback:function(content2Settings){activeIdService.company.setId(content2Settings.companyId),$rootScope.$broadcast("$update",{content2:content2Settings,callback:function(){$rootScope.$apply()}})}}))}),log.post("map",{sender:"mainGoogleMap.init",info:"done initializing map"}),callback&&callback()},isInitialized:function(){return mainGoogleMap.instance?!0:!1},setup:function(args,successCallback,failCallback){map.isReadyToSetup({mapServiceObject:mainGoogleMap},function(){infoWindow.close(),infoWindow.init(),mainGoogleMap.clearMarkers(),circle.remove(),mainGoogleMap.addMarkers(args.mapMarkers,function(){circle.centerMarker?args.radius?(circle.show(args),mainGoogleMap.instance.setCenter(new google.maps.LatLng(circle.centerMarker.latitude,circle.centerMarker.longitude)),mainGoogleMap.instance.fitBounds(circle.instance.getBounds())):(mainGoogleMap.instance.setCenter(new google.maps.LatLng(circle.centerMarker.latitude,circle.centerMarker.longitude)),mainGoogleMap.instance.fitBounds(mainGoogleMap.bounds)):(mainGoogleMap.instance.setCenter(args.mapOptions.center),mainGoogleMap.instance.setZoom(args.mapOptions.zoom)),log.post("map",{sender:"mainGoogleMap.setup",info:"done setting up map"}),successCallback&&successCallback()})},function(){log.post("map",{sender:"mainGoogleMap.setup",info:"could not setup map"}),failCallback()})},fireReadyChecking:function(callback){var googleMapReadyInteval=$interval(function(){switch(mainGoogleMap.isReadyToShow()){case!0:$interval.cancel(googleMapReadyInteval),callback&&callback();break;case!1:}},map.readyIntervalTime)},isReadyToShow:function(){var result;return result=mainGoogleMap.tilesLoaded?!0:!1,log.post("map",{sender:"mainGoogleMap.isReadyToShow",result:result}),result},refresh:function(){mainGoogleMap.isInitialized()&&(log.post("map",{sender:"mainGoogleMap.refresh",info:"done refreshing map"}),$timeout(function(){google.maps.event.trigger(mainGoogleMap.instance,"resize")}))},dispose:function(){mainGoogleMap.clearMarkers(),mainGoogleMap.tilesLoaded=!1,circle.remove(),infoWindow.close(),mainGoogleMap.instance=void 0,$rootScope.$broadcast("$update",{content2:{mainMapInstance:void 0}}),log.post("map",{sender:"mainGoogleMap.dispose",info:"done disposing map"})},addMarkers:function(markers,callback){markers?(mainGoogleMap.bounds=new google.maps.LatLngBounds,angular.forEach(markers,function(val,index){mainGoogleMap.markersObjects[index]=new google.maps.Marker({map:mainGoogleMap.instance,position:new google.maps.LatLng(markers[index].latitude,markers[index].longitude),title:markers[index].name,id:markers[index].id}),mainGoogleMap.markersObjects[index].setIcon(map.markerIconUrl),mainGoogleMap.markersObjects[index].addListener("click",function(){infoWindow.close();var current=this;void 0===mainGoogleMap.activeMarker?infoWindow.show(val,current):current.id!=mainGoogleMap.activeMarker.id?infoWindow.show(val,current):(mainGoogleMap.activeMarker=void 0,$rootScope.$broadcast("$update",{content2:{activeMarker:void 0}}))}),mainGoogleMap.bounds.extend(mainGoogleMap.markersObjects[index].getPosition()),index==markers.length-1&&(log.post("map",{sender:"mainGoogleMap.addMarkers",info:"done adding markers"}),callback&&callback())})):(log.post("map",{sender:"mainGoogleMap.addMarkers",info:"no markers to add"}),callback&&callback())},clearMarkers:function(){mainGoogleMap.markersObjects.length>0&&(log.post("map",{sender:"mainGoogleMap.clearMarkers",info:"done clearing markers"}),angular.forEach(mainGoogleMap.markersObjects,function(val,index){mainGoogleMap.markersObjects[index].setMap(null)}),mainGoogleMap.markersObjects=[])}},infoWindow={htmlViewUrl:"views/infoWindow.html",instance:void 0,init:function(){infoWindow.instance=new InfoBox({alignBottom:!0,disableAutoPan:!1,maxWidth:$(window).width()/2,pixelOffset:new google.maps.Size(-50,-50),zIndex:null,boxStyle:{opacity:1},closeBoxURL:"",infoBoxClearance:new google.maps.Size(1,1),isHidden:!1,pane:"floatPane",enableEventPropagation:!1})},show:function(val,marker){mainGoogleMap.activeMarker=val,$rootScope.$broadcast("$update",{content2:{activeMarker:val}}),httpService.requestData({url:infoWindow.htmlViewUrl,query:""},function(dataReceived){var scope=angular.element("body").scope(),compiled=$compile(dataReceived)(scope);infoWindow.instance.setContent(compiled[0]),infoWindow.instance.open(mainGoogleMap.instance,marker)})},close:function(){infoWindow.instance&&infoWindow.instance.close()}},circle={instance:void 0,centerMarker:void 0,show:function(args){circle.centerMarker&&(circle.instance=new google.maps.Circle({strokeColor:"000000",strokeOpacity:0,strokeWeight:0,fillColor:"#000000",fillOpacity:.15,clickable:!0,map:mainGoogleMap.instance,center:new google.maps.LatLng(circle.centerMarker.latitude,circle.centerMarker.longitude),radius:1e3*args.radius}),circle.instance.addListener("click",function(){infoWindow.close(),mainGoogleMap.activeMarker=void 0,$rootScope.$broadcast("$update",{content2:{activeMarker:void 0}})}),log.post("map",{sender:"circle.show",mapOptions:args.mapOptions,radius:args.radius,info:"circle visible"}))},remove:function(){circle.instance&&(circle.instance.setMap(null),circle.instance=void 0)},setCenterMarker:function(newCenterMarker){angular.isDefined(newCenterMarker)?(circle.centerMarker=newCenterMarker,log.post("map",{sender:"circle.setCenterMarker",status:"done"})):circle.centerMarker=void 0},isSetup:function(){return angular.isDefined(circle.instance)&&angular.isDefined(circle.centerMarker)?!0:!1}},smallGoogleMap={name:"smallGoogleMap",defaultMapZoom:17,instance:void 0,singleMarkerObject:void 0,init:function(args,callback){var mapOptions={center:{lat:Number(args.mapMarker.latitude),lng:Number(args.mapMarker.longitude)},zoom:smallGoogleMap.defaultMapZoom};smallGoogleMap.instance=new google.maps.Map(document.getElementById("smallGoogleMap"),{center:mapOptions.center,zoom:mapOptions.zoom}),smallGoogleMap.instance.addListener("tilesloaded",function(){log.post("map",{sender:"smallGoogleMap.$tilesloaded",status:"invoked"}),callback&&callback()}),log.post("map",{sender:"smallGoogleMap.init",info:"done initializing map"})},isInitialized:function(){return smallGoogleMap.instance?!0:!1},setup:function(mapMarker,successCallback,failCallback){map.isReadyToSetup({mapServiceObject:smallGoogleMap,mapMarker:mapMarker},function(){smallGoogleMap.clearMarker(),smallGoogleMap.addMarker(mapMarker,successCallback),log.post("map",{sender:"smallGoogleMap.setup",info:"done setting up map"})},function(){log.post("map",{sender:"smallGoogleMap.setup",info:"could not setup"}),failCallback()})},refresh:function(){log.post("map",{sender:"smallGoogleMap.refresh",info:"done refreshing map"}),$timeout(function(){google.maps.event.trigger(smallGoogleMap.instance,"resize")})},dispose:function(){smallGoogleMap.clearMarker(),smallGoogleMap.instance=void 0,log.post("map",{sender:"smallGoogleMap.dispose",info:"done disposing map"})},addMarker:function(marker,callback){smallGoogleMap.singleMarkerObject=new google.maps.Marker({map:smallGoogleMap.instance,position:new google.maps.LatLng(marker.latitude,marker.longitude),title:marker.name,id:marker.id}),smallGoogleMap.singleMarkerObject.setIcon(map.markerIconUrl),log.post("map",{sender:"smallGoogleMap.addMarker",info:"done adding marker"}),callback&&callback()},clearMarker:function(){smallGoogleMap.singleMarkerObject&&(log.post("map",{sender:"smallGoogleMap.clearMarker",info:"done clearing marker"}),smallGoogleMap.singleMarkerObject.setMap(null),smallGoogleMap.singleMarkerObject=void 0)}};return{map:map,marker:marker,mainGoogleMap:mainGoogleMap,infoWindow:infoWindow,circle:circle,smallGoogleMap:smallGoogleMap}};mapService.$inject=["$rootScope","$compile","$parse","$timeout","$interval","$window","$ionicHistory","httpService","activeIdService","globalService","log","scripts"],angular.module("appModule").service("mapService",mapService)}(),function(){var msgDialogService=function($rootScope,$timeout,$cordovaDialogs,globalService,hardCodedDataService,log){var messages={$locationError:{type:"alert",message:hardCodedDataService.msgDialog.messages.message1,title:hardCodedDataService.msgDialog.titles.title1,buttonArray:[hardCodedDataService.msgDialog.buttonLabels.label1],defaultText:void 0,callbackAction:"$onLocationErrorAlertClose"},$nothingToBeFiltered:{type:"alert",message:hardCodedDataService.msgDialog.messages.message2,title:hardCodedDataService.msgDialog.titles.title1,buttonArray:[hardCodedDataService.msgDialog.buttonLabels.label1],defaultText:void 0,callbackAction:void 0},$wrongFilterData:{type:"alert",message:hardCodedDataService.msgDialog.messages.message3,title:hardCodedDataService.msgDialog.titles.title1,buttonArray:[hardCodedDataService.msgDialog.buttonLabels.label1],defaultText:void 0,callbackAction:void 0},$wrongRadius:{type:"alert",message:hardCodedDataService.msgDialog.messages.message5,title:hardCodedDataService.msgDialog.titles.title1,buttonArray:[hardCodedDataService.msgDialog.buttonLabels.label1],defaultText:void 0,callbackAction:void 0},$getPostCodeBySuburbError:{type:"alert",message:hardCodedDataService.msgDialog.messages.message4,title:hardCodedDataService.msgDialog.titles.title1,buttonArray:[hardCodedDataService.msgDialog.buttonLabels.label1],defaultText:void 0,callbackAction:void 0}},showMsgDialog=function(msgKey){globalService.filter.byOnMobileFlag(function(args){switch(messages[args.msgKey].type){case"alert":$cordovaDialogs.alert(messages[args.msgKey].message,messages[args.msgKey].title,messages[args.msgKey].buttonArray[0]).then(function(){actionCallback(args.msgKey)});break;case"confirm":$cordovaDialogs.confirm(messages[args.msgKey].message,messages[args.msgKey].title,messages[args.msgKey].buttonArray).then(function(dialogResult){actionCallback(args.msgKey,dialogResult)});break;case"prompt":$cordovaDialogs.prompt(messages[args.msgKey].message,messages[args.msgKey].title,messages[args.msgKey].buttonArray,messages[args.msgKey].defaultText).then(function(result){actionCallback(args.msgKey,result.buttonIndex,result.input1)})}},function(args){log.post("dialog",{sender:"showMsgDialog",messageObject:messages[msgKey]})},{msgKey:msgKey})},actionCallback=function(msgKey,dialogResult,dialogInput){void 0!==messages[msgKey].callbackAction&&$rootScope.$broadcast(messages[msgKey].callbackAction,{dialogResult:dialogResult,dialogInput:dialogInput})};return{showMsgDialog:showMsgDialog}};msgDialogService.$inject=["$rootScope","$timeout","$cordovaDialogs","globalService","hardCodedDataService","log"],angular.module("appModule").service("msgDialogService",msgDialogService)}(),function(){var phonesMemoryService=function($rootScope,$cordovaFile,globalService,log){var init={dataStorageDir:void 0,service:function(cordovaObject){globalService.filter.byOnMobileFlag(function(){init.dataStorageDir=cordova.file.dataDirectory,log.post("memory",{sender:"init.service","init.dataStorageDir":init.dataStorageDir})})}},file={read:function(folder,file,successCallBack,errorCallBack){globalService.filter.byOnMobileFlag(function(){$cordovaFile.readAsText(folder,file).then(function(fileData){successCallBack&&successCallBack(fileData),log.post("memory",{sender:"file.read",folder:folder,file:file,fileData:{type:jQuery.type(fileData),length:fileData.length},status:"success"})},function(fileData){errorCallBack&&errorCallBack(fileData),log.post("memory",{sender:"file.read",folder:folder,file:file,fileData:{type:jQuery.type(fileData),length:fileData.length},status:"error"})})},function(){errorCallBack&&errorCallBack({code:1}),log.post("memory",{sender:"file.read",folder:folder,file:file,status:"error",info:"not on mobile"})})},save:function(folder,file,fileData,successCallBack,errorCallBack){globalService.filter.byOnMobileFlag(function(){$cordovaFile.writeFile(folder,file,fileData,!0).then(function(success){successCallBack&&successCallBack(),log.post("memory",{sender:"file.save",folder:folder,file:file,fileData:{type:jQuery.type(fileData),length:fileData.length},status:"success"})},function(error){errorCallBack&&errorCallBack(),log.post("memory",{sender:"file.save",folder:folder,file:file,fileData:{type:jQuery.type(fileData),length:fileData.length},status:"error"})})},function(){errorCallBack&&errorCallBack(),log.post("memory",{sender:"file.save",folder:folder,file:file,fileData:{type:jQuery.type(fileData),length:fileData.length},status:"error",info:"not on mobile"})})}},mapStates={fileName:"mapStates.json",read:function(args,successCallBack,errorCallBack){file.read(init.dataStorageDir,mapStates.fileName,successCallBack,errorCallBack)},save:function(args,successCallBack,errorCallBack){file.save(init.dataStorageDir,mapStates.fileName,args.fileData,successCallBack,errorCallBack)},createDirs:function(args,successCallBack,errorCallBack){globalService.filter.byOnMobileFlag(function(){for(var i=0;i<args.mapStates.length;++i){var result=$cordovaFile.createDir(init.dataStorageDir,args.mapStates[i].name,!1);if(0!==result.$$state.status){log.post("memory",{sender:"mapStates.createDirs",status:"error"}),errorCallBack&&errorCallBack();break}i+1==args.mapStates.length&&(log.post("memory",{sender:"mapStates.createDirs",status:"success"}),successCallBack&&successCallBack())}},function(){log.post("memory",{sender:"mapStates.createDirs",status:"error",info:"not on mobile"}),errorCallBack&&errorCallBack()})}},categories={fileName:"categories.json",read:function(args,successCallBack,errorCallBack){file.read(init.dataStorageDir,categories.fileName,successCallBack,errorCallBack)},save:function(args,successCallBack,errorCallBack){file.save(init.dataStorageDir,categories.fileName,args.fileData,successCallBack,errorCallBack)}},companies={read:function(args,successCallBack,errorCallBack){file.read(init.dataStorageDir+args.mapStateName,args.fileName+".json",successCallBack,errorCallBack)},save:function(args,successCallBack,errorCallBack){file.save(init.dataStorageDir+args.mapStateName,args.fileName+".json",args.fileData,successCallBack,errorCallBack)}};return{init:init,file:file,mapStates:mapStates,categories:categories,companies:companies}};phonesMemoryService.$inject=["$rootScope","$cordovaFile","globalService","log"],angular.module("appModule").service("phonesMemoryService",phonesMemoryService)}(),function(){var promise=function($q,$http,log){return{create:function(promiseName,job,args){var deferred=$q.defer();return job(args,function(data){deferred.resolve(data),log.post("promise",{promiseName:promiseName,status:"resolved"})},function(){deferred.reject(),log.post("promise",{promiseName:promiseName,status:"rejected"})}),deferred.promise}}};promise.$inject=["$q","$http","log"],angular.module("appModule").service("promise",promise)}(),function(){var scripts=function($rootScope,globalService,log){var options={getScriptTimeOut:5e3},urls={googleApi:"https://maps.googleapis.com/maps/api/js?sensor=false&callback=onGoogleMapsApiLoaded&amp;language=en",infoBoxLib:"lib/google-infobox/google-infobox.js",robotoFont:"https://fonts.googleapis.com/css?family=Roboto"},load={mapScripts:function(callback){window.onGoogleMapsApiLoaded=function(){log.post("map",{sender:"load.mapScripts",info:"google maps api loaded"}),other.overrideInsertBeforeMethods(),$.ajax({url:urls.infoBoxLib,dataType:"script",timeout:options.getScriptTimeOut,success:function(){log.post("map",{sender:"load.mapScripts",info:"infobox lib loaded"}),callback()},error:function(){log.post("map",{sender:"load.mapScripts",info:"could not load infobox lib"}),callback()}})},$.ajax({url:urls.googleApi,dataType:"script",timeout:options.getScriptTimeOut,error:function(){log.post("map",{sender:"load.mapScripts",info:"could not load google maps api"}),callback()}})}},other={overrideInsertBeforeMethods:function(){var head=document.getElementsByTagName("head")[0],insertBefore=head.insertBefore;head.insertBefore=function(newElement,referenceElement){return newElement.href&&0===newElement.href.indexOf(urls.robotoFont)?void log.post("map",{sender:"other.overrideInsertBeforeMethods",info:"prevented Roboto font from loading"}):void insertBefore.call(head,newElement,referenceElement)}}};return{options:options,urls:urls,load:load}};scripts.$inject=["$rootScope","globalService","log"],angular.module("appModule").service("scripts",scripts)}();